package flow.cp.controller;

import java.util.Base64;
import java.util.Base64.Decoder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import flow.cp.dto.LogDTO;
import flow.cp.dto.ResponseDTO;
import flow.cp.entity.LogEntity;
import flow.cp.service.CopyService;
import flow.cp.service.TokenProvider;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

@CrossOrigin(origins ="*")
@RestController
@RequestMapping("/copy")
public class CopyController {
	@Autowired
	public CopyService copyService;
	
	@Autowired
	public TokenProvider tokenProvider;
	
	//영상비교페이지에서 클릭시 임시로 표절률 결과 없이 데이터 저장
	@PostMapping("/log")
	public ResponseEntity<?> saveInitiateLogData(@AuthenticationPrincipal String userId, @RequestBody LogDTO logDTO){
		try {
			String token = logDTO.getToken();
			String id = tokenProvider.validateAndGetUserId(token);
			
			System.out.println(token);
			System.out.println(id);
			LogEntity sample = LogEntity.builder().url1(logDTO.getUrl1()).url2(logDTO.getUrl2()).build();			
			copyService.createCopyLog(sample);
			return ResponseEntity.ok().body(logDTO);
		}catch(Exception e) {
			ResponseDTO responseDTO = ResponseDTO.builder().error(e.getMessage()).build();
			return ResponseEntity.badRequest().body(responseDTO);
		}
	}
	// ai 모듈로 데이터 전송
//	@PostMapping("/sendAiModule")
//	public ResponseEntity<?> sendToAiModule(@RequestBody LogDTO logDTO){
//		try {
//			LogDTO sample = logDTO.builder()
//					.url1(logDTO.getUrl1())
//					.url2(logDTO.getUrl2())
//					.build();
//
//			return ResponseEntity.ok().body(sample);
//		}catch(Exception e) {
//			ResponseDTO responseDTO = ResponseDTO.builder().error(e.getMessage()).build();
//			return ResponseEntity.badRequest().body(responseDTO);
//		}
//	}
}
