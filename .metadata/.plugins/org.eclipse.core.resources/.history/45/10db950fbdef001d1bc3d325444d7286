package flow.cp.service;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import flow.cp.entity.UserEntity;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class TokenProvider {
	private static final String SECRET_KEY = "NMA8JPctFuna59f5";
	
	public String create(UserEntity userEntity) {
		Date expireDate	= Date.from(
				Instant.now()
						.plus(1, ChronoUnit.DAYS));
				
				return Jwts.builder()
							.signWith(SignatureAlgorithm.HS512,SECRET_KEY)
							.setSubject(userEntity.getId())
							.setIssuer("todo app")
							.setIssuedAt(new Date())
							.setExpiration(expireDate)
							.compact();
	}
	
	public String validateAndGetUserId(String token) {
		Claims claims = Jwts.parser()
							.setSigningKey(SECRET_KEY)
							.parseClaimsJws(token)
							.getBody();
		
		return claims.getSubject();
	}
    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private Long expiration;

    public String generateToken(UserDetails userDetails) {
        // 토큰 생성 로직
    }

    public String getTokenFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }

    public Boolean isTokenExpired(String token) {
        // 토큰 만료 여부 확인 로직
    }

    public Date getExpirationDateFromToken(String token) {
        // 토큰 만료시간 추출 로직
    }

    public void setTokenExpiration(String token, Date expirationDate) {
        Claims claims = getAllClaimsFromToken(token);
        claims.setExpiration(expirationDate);
    }

    private Claims getAllClaimsFromToken(String token) {
        // 토큰에서 클레임 추출 로직
    }
}
